{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["layout","_","range","map","n","Math","floor","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","positions","shuffle","moves","time","timer","reset","bind","assertThisInitialized","updatePosition","onKeyUpHandler","evt","key","console","log","index","_this2","t","window","setInterval","setState","emptyIndex","indexOf","targetIndex","dif","abs","every","value","array","parseInt","clearInterval","alert","concat","_this3","_this4","react_default","a","createElement","className","onClick","style","flex","fontSize","i","cellClass","_layout$_this4$state$","slicedToArray","x","y","transform","fontWeight","color","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.697c8da3.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, { Component } from 'react';\nimport './App.css';\n\nconst layout = _.range(0, 16).map(n => {\n  const row = Math.floor(n / 4);\n  const col = n % 4;\n  return [80 * col, 80 * row];\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      positions: _.shuffle(_.range(0, 16)),\n      moves: null,\n      time: null,\n      timer: null,\n    }\n\n    this.reset = this.reset.bind(this);\n    this.updatePosition = this.updatePosition.bind(this);\n    this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n  }\n\n  onKeyUpHandler(evt, key) {\n    console.log(evt, key);\n  }\n\n  updatePosition(index) {\n    if (this.state.time == null) {\n      var t = window.setInterval(() => {\n        this.setState({\n          time: this.state.time == null ? 1 : this.state.time + 1,\n        });\n      }, 1000);\n      this.setState({ timer: t });\n    }\n\n    let { positions } = this.state;\n    let emptyIndex = positions.indexOf(0);\n    let targetIndex = positions.indexOf(index);\n    const dif = Math.abs(targetIndex - emptyIndex);\n    if (dif === 1 || dif === 4) {\n      positions[emptyIndex] = index;\n      positions[targetIndex] = 0;\n      this.setState({ positions, moves: this.state.moves ? this.state.moves + 1 : 1 });\n      let win = _.every(positions, (value, index, array) => {\n        value = value || 16;\n        return index === 0 || parseInt(array[index - 1]) <= parseInt(value)\n      });\n      if (win) {\n        this.setState({\n          positions: _.shuffle(_.range(0, 16))\n        }, () => {\n          window.clearInterval(this.state.timer);\n        })\n        window.alert(`U Win!!! - Time Taken :${this.state.time} - Total Moves: ${this.state.moves}`);\n      }\n    }\n  }\n  reset() {\n    this.setState({\n      time: null,\n      moves: null,\n      positions: _.shuffle(_.range(0, 16))\n    }, () => {\n      window.clearInterval(this.state.timer);\n    })\n  }\n  render() {\n    return (\n      <div className=\"puzzle\">\n        <h2 className='heading-title'>15 puzzle</h2>\n        <div className='upper-action-div'>\n          <button onClick={this.reset} className='new-game-btn'>New Game</button>\n          <span style={{ flex: '1 1 auto' }}></span>\n          <div className='metrics'>\n            <div className='text-right'>\n              <div className='upper-action-div-info'>Time</div>\n              <div className='upper-action-div-info xxl'>{this.state.time}<span style={{fontSize: 'large'}}>s</span></div>\n            </div>\n            <div className='text-right'>\n              <div className='upper-action-div-info'>Moves</div>\n              <div className='upper-action-div-info xxl'>{this.state.moves}</div>\n            </div>\n          </div>\n\n        </div>\n\n        <div className=\"game\">\n\n          {this.state.positions.map((i, key) => {\n            let cellClass = key ? \"cell\" : 'empty cell';\n            let [x, y] = layout[this.state.positions.indexOf(key)];\n            return <div key={key}\n              className={cellClass}\n              onClick={() => this.updatePosition(key)}\n              style={{ transform: `translate3d(${x}px,${y}px,0) scale(1.1)` }}>{key}</div>\n          })}\n        </div>\n          <p style={{fontWeight:'bold'}}>Tap on tile to move tiles in grid to order them from <span style={{ color: 'white' }}>1 to 15.</span></p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
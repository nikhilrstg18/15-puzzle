{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["layout","_","range","map","n","Math","floor","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","positions","shuffle","moves","time","timer","show","reset","bind","assertThisInitialized","updatePosition","handleShow","handleClose","_this2","setState","index","_this3","emptyIndex","indexOf","targetIndex","dif","abs","t","window","setInterval","every","value","array","parseInt","clearInterval","_this4","react_default","a","createElement","className","onClick","style","flex","fontSize","i","key","cellClass","_layout$_this4$state$","slicedToArray","x","y","transform","concat","href","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39788d6f.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Button, Modal } from \"react-bootstrap\";\n\nconst layout = _.range(0, 16).map(n => {\n  const row = Math.floor(n / 4);\n  const col = n % 4;\n  return [80 * col, 80 * row];\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      positions: _.shuffle(_.range(0, 16)),\n      moves: null,\n      time: null,\n      timer: null,\n      show: false,\n    }\n\n    this.reset = this.reset.bind(this);\n    this.updatePosition = this.updatePosition.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n  }\n\n  handleClose() {\n    this.setState({ \n      show: false\n    },()=>{\n      this.reset();\n    });\n  }\n\n  handleShow() {\n    this.setState({ \n      show: true\n    });\n  }\n\n\n  updatePosition(index) {\n\n    let { positions } = this.state;\n    let emptyIndex = positions.indexOf(0);\n    let targetIndex = positions.indexOf(index);\n    const dif = Math.abs(targetIndex - emptyIndex);\n    if (dif === 1 || dif === 4) {\n      positions[emptyIndex] = index;\n      positions[targetIndex] = 0;\n      this.setState({\n        positions,\n        moves: this.state.moves ? this.state.moves + 1 : 1\n      }, () => {\n        if (this.state.timer == null) {\n          var t = window.setInterval(() => {\n            this.setState({\n              time: this.state.time == null ? 1 : this.state.time + 1,\n            });\n          }, 1000);\n          this.setState({ timer: t });\n        }\n      });\n      let win = _.every(positions, (value, index, array) => {\n        value = value || 16;\n        return index === 0 || parseInt(array[index - 1]) <= parseInt(value)\n      });\n      if (win) {        \n        window.clearInterval(this.state.timer);\n        this.handleShow();\n      }\n    }\n  }\n  reset() {\n    window.clearInterval(this.state.timer);\n    this.setState({\n      time: null,\n      moves: null,\n      timer:null,\n      positions: _.shuffle(_.range(0, 16))\n    });\n  }\n  render() {\n    return (\n      <div className='row'>\n        <div className='col-lg-3 col-md-3 '></div>\n        <div className='col-lg-6 col-md-6 col-sm-12 col-xs-12'>\n          <div className=\"puzzle\">\n            <h2 className='heading-title'>15 puzzle</h2>\n            <div className='upper-action-div'>\n              <button onClick={this.reset} className='new-game-btn'>New Game</button>\n              <span style={{ flex: '1 1 auto' }}></span>\n              <div className='metrics'>\n                <div className='text-right'>\n                  <div className='upper-action-div-info'>Time</div>\n                  <div className='upper-action-div-info xxl'>{this.state.time}<span style={{ fontSize: 'large' }}>s</span></div>\n                </div>\n                <div className='text-right'>\n                  <div className='upper-action-div-info'>Moves</div>\n                  <div className='upper-action-div-info xxl'>{this.state.moves}</div>\n                </div>\n              </div>\n\n            </div>\n\n            <div className=\"game\">\n\n              {this.state.positions.map((i, key) => {\n                let cellClass = key ? \"cell\" : 'empty cell';\n                let [x, y] = layout[this.state.positions.indexOf(key)];\n                return <div key={key}\n                  className={cellClass}\n                  onClick={() => this.updatePosition(key)}\n                  style={{ transform: `translate3d(${x}px,${y}px,0) scale(1.1)` }}>{key}</div>\n              })}\n            </div>\n            <p className='instruction'>Tap on tile to move tiles in grid to order them from 1 to 15.</p>\n            <div className='footer'>\n              <hr className='horizon'></hr>\n              <p className='created-by'>Crafted by Nikhil Rustagi</p>\n              <p className='created-by'>View my portfolio\n                <i className='fas fa-at icon'></i>\n                <a href='hhtps://nikhilrstg18.github.io/nikhil-rustagi/'>\n                  <strong>nikhil-rustagi\n                </strong>\n                </a>\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className='col-lg-3 col-md-3'></div>\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Congratulation You Won !</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div>Total time taken: {this.state.time}</div>\n            <div>Total moves: {this.state.moves}</div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n      \n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}